import UIKit


/*
 Что такое кортеж
 Кортежи — это удобный и мощный инструмент, предоставляемый языком Swift, чтобы группировать и работать с несколькими значениями в одном составном значении. Далее рассмотрим примеры использования кортежей в Swift.
 */
// Как объявить кортеж в Swift?
//let myTuple = (1, 2, 3)
//let person = ("John", 30)
// Кортежи обозначаются только круглыми скобками.



/*
 Доступ к элементам кортежа
 Для получения доступа к элементам кортежа в Swift есть два способа: индексирование или использование именованных элементов.
 
 Индексирование
 Элементы кортежа могут быть доступны по индексу, начиная с нуля. Например, вот что нужно сделать, чтобы получить доступ к имени из кортежа person:
 */
 //let person = ("John", 30)
 //let name = person.0
 //print(name) // Выведет: John
 


 // Именованные элементы
//Более удобный способ получения доступа к элементам кортежа — использование именованных элементов при его объявлении:

//let person = (name: "John", age: 30)



//В этом случае элементы кортежа получают имена name и age. Затем к ним можно обращаться напрямую:

//let name = person.name
//let age = person.age
//print(name) // Выведет: John
//print(age) // Выведет: 30


// Каким образом можно получить значение элемента из кортежа по его индексу?
//Обращением к индексу через точку: tuple.index


//Как объявить кортеж с именованными элементами в Swift?
//let tuple = (name: "John", age: 30, isEmployed: true)




/// Получение элементов кортежа
///Swift также даёт возможность доставать отдельные элементы из кортежа и присваивать их отдельным константам или переменным. Вы можете присвоить идентификатор каждому элементу кортежа уже после его создания и в дальнейшем пользоваться этими идентификаторами без упоминания кортежа, просто как отдельными сущностями. Это особенно полезно, когда вам нужно работать с каждым элементом по отдельности.

//Пример:

//let person = ("John", 30)
//let (name, age) = person
//print(name) // Выведет: John
//print(age) // Выведет: 30

//Каким образом происходит получение элементов кортежа?
//С использованием синтаксиса присваивания let (element1, element2) = tuple



/// Функции
/// Что дает функции?
/// - код содержит меньше дублирования
/// - код легче читается
/// - изменения вносится быстрее


/*
 Объявление функции
 1. Ключевое слово func
 2. Имя функции для вызова
 3. Имя и тип входного параметра
 4. Тип выходного параметра
 5. Ключевое слово, конец функции, после которого
 мы возвращаем результат
 6. Закрывающие скобки, указывают границы тела
 функции
 
1-func 2-sayHello(3-name: String) -> 4-String {
    let helloStr = "Hello" + name
    5- return helloStr
} 6
-------------------------------------
 Пример вызова функции
 Чтобы вызвать функцию:
 ● пишем имя
 ● в скобках указываем значение после имени
 параметра
 
 sayHello(name: "Skillbox")
*/

func sayHello(name: String) -> String {
    let helloStr = "Hello" + name
    return helloStr
}

sayHello(name: "Skillbox")
sayHello(name: "John")



// func без входного параметра
func printHello() -> String {
    let hello = "Hello, World"
    return hello
}
printHello()


// func без входного и выходного параметра
func printHello1() {
    let hello1 = "Hi,Skillfactory"
    print(hello1)
}
printHello1()


// func вернет два значение (картеж с двум параметрам)
let values: (numberValue: Int, stringValue: String) = (numberValue: 1, stringValue: "Skillbox")
print(values.numberValue)
print(values.stringValue)


func getHelloAndNumber() -> (numberValue1: Int, stringValue1: String){
    let values1: (numberValue1: Int, stringValue1: String) = (numberValue1: 1, stringValue1: "Skillbox")
    return values1
}
print(getHelloAndNumber())



//  мы хотим поменять название параметра в которое мы будем использовать внутри func  (сумирует 1 +1 числа)
func getSum(_ number1: Int, _ number2: Int) -> Int {
    return number1 + number2
}
getSum(10, 5)
print(getSum(10, 5))



/*
 Передача параметров по значению
 По умолчанию Swift передаёт параметры функции по значению. То есть в функцию передаётся  копия значения. Изменения, внесённые в копию внутри функции, не отражаются на исходном значении.

 func greet(person: String) {
     print("Привет,")
     print(person)
 }
 var name = “Маша”
 greet(name) // Вывод: Привет,
                       Маша
 greet(“Света”) // Вывод: Привет,
                          Света
 В этом примере в функцию передаётся только значение, неважно —  переменная это или строка, на вход функция получает копию. А значение переменных вызывающего модуля остаётся неизменным.
 */
